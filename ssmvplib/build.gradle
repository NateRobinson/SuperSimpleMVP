apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven'
apply plugin: 'com.novoda.bintray-release'

android {
  compileSdkVersion rootProject.ext.android["compileSdkVersion"]
  buildToolsVersion rootProject.ext.android["buildToolsVersion"]
  useLibrary 'org.apache.http.legacy'

  compileOptions {
    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion rootProject.ext.android["minSdkVersion"]
    targetSdkVersion rootProject.ext.android["targetSdkVersion"]
    versionCode rootProject.ext.android["versionCode"]
    versionName rootProject.ext.android["versionName"]
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  //support lib
  api(rootProject.ext.dependencies["appcompat-v7"]) {
    exclude module: 'support-annotations'
  }
  api rootProject.ext.dependencies["design"]
  api rootProject.ext.dependencies["core-ktx"]
  api(rootProject.ext.dependencies["recyclerview-v7"]) {
    exclude module: 'support-annotations'
  }
  //rx lib
  api rootProject.ext.dependencies["rxjava2"]
  api(rootProject.ext.dependencies["rxandroid2"]) {
    exclude module: 'rxjava'
  }
  api(rootProject.ext.dependencies["rxcache2"]) {
    exclude module: 'rxjava'
    exclude module: 'dagger'
    exclude module: 'api'
  }
  implementation(rootProject.ext.dependencies["rxcache-jolyglot-gson"]) {
    exclude module: 'gson'
  }
  api(rootProject.ext.dependencies["rxlifecycle3"]) {
    exclude module: 'rxjava'
    exclude module: 'jsr305'
  }
  api(rootProject.ext.dependencies["rxlifecycle3-android"]) {
    exclude module: 'support-annotations'
    exclude module: 'rxjava'
    exclude module: 'rxandroid'
    exclude module: 'rxlifecycle'
  }
  api(rootProject.ext.dependencies["rxpermissions2"]) {
    exclude module: 'rxjava'
    exclude module: 'support-annotations'
  }
  api rootProject.ext.dependencies['rxerrorhandler2']
  //network lib
  api(rootProject.ext.dependencies["retrofit"]) {
    exclude module: 'okhttp'
    exclude module: 'okio'
  }
  implementation(rootProject.ext.dependencies["retrofit-converter-gson"]) {
    exclude module: 'gson'
    exclude module: 'okhttp'
    exclude module: 'okio'
    exclude module: 'retrofit'
  }
  implementation(rootProject.ext.dependencies["retrofit-adapter-rxjava2"]) {
    exclude module: 'rxjava'
    exclude module: 'okhttp'
    exclude module: 'retrofit'
    exclude module: 'okio'
  }
  api rootProject.ext.dependencies["okhttp3"]
  api rootProject.ext.dependencies["logging-interceptor"]
  api rootProject.ext.dependencies["glide"]
  api rootProject.ext.dependencies["retrofit-url-manager"]
  api rootProject.ext.dependencies["progressmanager"]
  implementation rootProject.ext.dependencies["glide-loader-okhttp3"]
  //tools lib
  api rootProject.ext.dependencies["autosize"]
  api rootProject.ext.dependencies["dagger2"]
  api rootProject.ext.dependencies["gson"]
  api(rootProject.ext.dependencies["arouter"]) {
    exclude module: 'support-v4'
    exclude module: 'support-annotations'
  }
  api rootProject.ext.dependencies["utilcode"]
  api rootProject.ext.dependencies["timber"]
  kapt rootProject.ext.dependencies["dagger2-compiler"]
  kapt(rootProject.ext.dependencies["glide-compiler"]) {
    exclude module: 'jsr305'
  }
}

allprojects {
  afterEvaluate { project ->
    if (project.getTasksByName("javadocRelease", false).size() > 0) {
      project.getTasksByName("javadocRelease", false)[0].enabled = false
    }
  }
}

uploadArchives{
  repositories.mavenDeployer{
    // 配置本地仓库路径，项目根目录下的repository目录中
    repository(url: uri('../repository'))
    pom.groupId = "com.nate.ssmvp"// 唯一标识（通常为模块包名，也可以任意）
    pom.artifactId = "ssmvp" // 项目名称（通常为类库模块名称，也可以任意）
    pom.version = "1.0.0" // 版本号
  }
}

publish {
  //远程仓库名字,不指明，默认是上传到maven
  repoName = 'SSmvpMaven'
  userOrg = 'ssmvp'
  groupId = 'com.nate.ssmvp'
  artifactId = 'ssmvp'
  publishVersion = rootProject.ext.android["versionName"]
  desc = 'A super simple mvp library to use mvp.'
  website = ''
}
